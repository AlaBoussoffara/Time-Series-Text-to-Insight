from typing import TypedDict, List
from langgraph.graph import StateGraph, END
from langchain_anthropic import ChatAnthropic
from llm import llm_from
import os
import sqlite3
import json
from pydantic import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser


from typing import TypedDict, List, Any
from typing import TypedDict, List, Any

class GraphState(TypedDict):
    """
    Repr√©sente l'√©tat de notre graphe (mis √† jour pour le datastore).

    Attributs:
        question: La question en langage naturel de l'utilisateur.
        db_schema: Le sch√©ma de la base de donn√©es.
        sql_query: La requ√™te SQL g√©n√©r√©e par le LLM.
        query_result: Le r√©sultat de l'ex√©cution de la requ√™te SQL.
        description: Une description textuelle des donn√©es r√©cup√©r√©es.
        reference_key: La cl√© unique pour acc√©der aux donn√©es dans le datastore.
        error_message: Un message d'erreur en cas de probl√®me.
    """
    question: str
    db_schema: str
    sql_query: str
    query_result: List[Any]
    description: str
    reference_key: str
    error_message: str


# Pour cet exemple, nous utilisons une base de donn√©es SQLite en m√©moire.
# Remplacez ceci par la connexion √† votre base de donn√©es r√©elle.
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

# Cr√©er des tables de d√©mo
cursor.execute("""
CREATE TABLE sensors (
    id TEXT PRIMARY KEY,
    location TEXT NOT NULL,
    type TEXT
);
""")
cursor.execute("""
CREATE TABLE sensor_readings (
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    sensor_id TEXT,
    value REAL,
    FOREIGN KEY (sensor_id) REFERENCES sensors(id)
);
""")
conn.commit()

def get_db_schema(connexion):
    """R√©cup√®re le sch√©ma de la base de donn√©es (instructions CREATE)."""
    schema = ""
    cursor = connexion.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    for table in tables:
        cursor.execute(f"SELECT sql FROM sqlite_master WHERE type='table' AND name='{table[0]}'")
        schema += cursor.fetchone()[0] + "\n\n"
    return schema

# Test de la fonction
print(get_db_schema(conn))


def retrieve_schema_node(state: GraphState):
    """
    N≈ìud qui r√©cup√®re le sch√©ma de la base de donn√©es et l'ajoute √† l'√©tat.
    """
    print("--- üß† √âTAPE : R√âCUP√âRATION DU SCH√âMA ---")
    state['db_schema'] = get_db_schema(conn)
    return state


def execute_sql_tool(connexion, sql_query: str):
    """
    Ex√©cute une requ√™te SQL et retourne le r√©sultat ou une erreur.
    """
    try:
        cursor = connexion.cursor()
        cursor.execute(sql_query)
        result = cursor.fetchall()
        connexion.commit()
        return result
    except sqlite3.Error as e:
        # En cas d'erreur, nous retournons le message d'erreur.
        # Cela sera utile plus tard pour l'auto-correction.
        return f"Erreur d'ex√©cution SQL: {e}"

# Initialisez votre mod√®le LLM
USE_MODEL = os.getenv("USE_MODEL", "mistral-ollama")
llm = llm_from(USE_MODEL)

def generate_sql_node(state: GraphState):
    """
    N≈ìud qui g√©n√®re la requ√™te SQL en utilisant le LLM.
    """
    print("--- üß† √âTAPE : G√âN√âRATION DE LA REQU√äTE SQL ---")
    question = state['question']
    db_schema = state['db_schema']

    # Le prompt syst√®me est la cl√© du succ√®s !
    system_prompt = f"""
    Vous √™tes un expert en SQL. Votre unique t√¢che est de convertir une question en langage naturel en une requ√™te SQL syntaxiquement correcte pour une base de donn√©es SQLite.

    R√®gles importantes :
    1.  Basez-vous **uniquement** sur le sch√©ma de base de donn√©es fourni ci-dessous. N'inventez pas de colonnes ou de tables.
    2.  Ne retournez **que** le code SQL, sans aucune explication, phrase d'introduction ou formatage de type markdown. La sortie doit √™tre directement ex√©cutable.
    3.  Analysez attentivement la question pour comprendre les colonnes, les agr√©gations (COUNT, AVG, MAX), et les conditions (WHERE) n√©cessaires.

    Voici le sch√©ma de la base de donn√©es :
    ---
    {db_schema}
    ---
    """

    user_prompt = f"Question: {question}"

    # Appel du LLM
    response = llm.invoke([
        ("system", system_prompt),
        ("human", user_prompt)
    ])
    
    sql_query = response.content.strip()
    
    # Nettoyage pour supprimer les ```sql et ``` potentiels
    if sql_query.startswith("```sql"):
        sql_query = sql_query[5:]
    if sql_query.endswith("```"):
        sql_query = sql_query[:-3]
    
    state['sql_query'] = sql_query.strip()
    return state

def execute_sql_node(state: GraphState):
    """
    N≈ìud qui ex√©cute la requ√™te SQL et stocke le r√©sultat.
    """
    print("--- üß† √âTAPE : EX√âCUTION DE LA REQU√äTE SQL ---")
    sql_query = state['sql_query']
    
    # Appel de notre outil d'ex√©cution
    result = execute_sql_tool(conn, sql_query)
    
    if isinstance(result, str) and "Erreur" in result:
        # Si une erreur est retourn√©e, on la stocke dans error_message
        print(f"--- üö® ERREUR D'EX√âCUTION ---")
        state['error_message'] = result
        state['query_result'] = []
    else:
        # Sinon, on stocke le r√©sultat
        print(f"--- ‚úÖ SUCC√àS DE L'EX√âCUTION ---")
        state['query_result'] = result
        state['error_message'] = None # On s'assure qu'il n'y a pas d'ancien message d'erreur
        
    return state

#### Cr√©ation de la r√©f√©rerence et description ####
from pydantic import BaseModel, Field

class ReferenceOutput(BaseModel):
    """Un mod√®le pour contenir une cl√© de r√©f√©rence et sa description."""
    reference_key: str = Field(description="L'identifiant unique pour la r√©f√©rence, ex: releve_max_sensor_123")
    description: str = Field(description="Une description lisible de ce √† quoi la r√©f√©rence se rapporte.")

def generate_summary_node(state: GraphState):
    """
    N≈ìud qui g√©n√®re une description et une cl√© de r√©f√©rence
    en utilisant la sortie structur√©e du LLM.
    """
    print("--- üß† √âTAPE : G√âN√âRATION DE LA DESCRIPTION ET DE LA CL√â ---")
    
    # Configure le LLM pour qu'il retourne directement un objet Pydantic
    structured_llm = llm.with_structured_output(ReferenceOutput)
    question = state['question']
    
    # Le prompt peut √™tre simplifi√©, car LangChain ajoute ses propres instructions
    # pour garantir le format de sortie.
    prompt = f"""
    Analyse la question suivante et extrais-en une cl√© de r√©f√©rence et une description.

    Question: "{question}"
    """
    
    try:
        # La r√©ponse est d√©j√† un objet Pydantic, pas besoin de parser !
        response = structured_llm.invoke(prompt)
        
        # On acc√®de directement aux attributs de l'objet
        state['reference_key'] = response.reference_key
        state['description'] = response.description

    except Exception as e:
        # G√®re les erreurs si le LLM ne parvient pas √† se conformer au sch√©ma
        print(f"--- üö® ERREUR : Le LLM n'a pas pu g√©n√©rer une sortie structur√©e valide. Erreur: {e} ---")
        state['reference_key'] = "erreur_generation_cle"
        state['description'] = "Erreur lors de la g√©n√©ration de la description."
        
    return state

def save_to_datastore_node(state: GraphState):
    """
    N≈ìud qui sauvegarde le r√©sultat et sa description dans le datastore
    en utilisant la cl√© de r√©f√©rence.
    """
    print("--- üß† √âTAPE : SAUVEGARDE DANS LE DATASTORE ---")
    reference_key = state['reference_key']
    description = state['description']
    data = state['query_result']
    
    if not reference_key or "erreur" in reference_key:
        print("--- ‚ö†Ô∏è AVERTISSEMENT : Cl√© invalide, sauvegarde annul√©e. ---")
        return state
        
    # Structure demand√©e : { "description": str, "data": resultat }
    DATASTORE[reference_key] = {
        "description": description,
        "data": data
    }
    print(f"--- ‚úÖ Donn√©es sauvegard√©es sous la cl√© : '{reference_key}' ---")
    return state


#### Cr√©ation du workflow ####

# Notre datastore en m√©moire pour stocker les r√©sultats
DATASTORE = {}

#### Cr√©ation du workflow ####

# Cr√©er une nouvelle instance de graphe
workflow = StateGraph(GraphState)

# Ajouter les n≈ìuds au graphe
workflow.add_node("retrieve_schema", retrieve_schema_node)
workflow.add_node("generate_sql", generate_sql_node)
workflow.add_node("execute_sql",execute_sql_node)
workflow.add_node("generate_summary", generate_summary_node)
workflow.add_node("save_to_datastore", save_to_datastore_node)

# D√©finir le point de d√©part
workflow.set_entry_point("retrieve_schema")

# D√©finir les ar√™tes (le flux)
workflow.add_edge("retrieve_schema", "generate_sql")
workflow.add_edge("generate_sql","execute_sql")
workflow.add_edge("execute_sql", "generate_summary")
workflow.add_edge("generate_summary", "save_to_datastore")
workflow.add_edge("save_to_datastore", END) # Et on termine

# Compiler le graphe
sql_agent_mvp = workflow.compile()

# # Question de l'utilisateur
# user_question = "Quel est le relev√© maximum pour le capteur 'sensor_123' ?"

# # Lancer le graphe avec l'entr√©e initiale
# initial_state = {"question": user_question}
# final_state = sql_agent_mvp.invoke(initial_state)

# # Afficher le r√©sultat
# print("\n--- ‚úÖ R√âSULTAT FINAL ---")
# print(f"Question : {final_state['question']}")
# print(f"Requ√™te SQL g√©n√©r√©e :\n{final_state['sql_query']}")

# # Test avec une autre question
# user_question_2 = "Combien y a-t-il de capteurs au total ?"
# final_state_2 = sql_agent_mvp.invoke({"question": user_question_2})

# print("\n--- ‚úÖ R√âSULTAT FINAL 2 ---")
# print(f"Question : {final_state_2['question']}")
# print(f"Requ√™te SQL g√©n√©r√©e :\n{final_state_2['sql_query']}")

# (Assurez-vous que le code de l'√©tape 1 du MVP est pr√©sent : connexion DB, 
#  d√©finition de GraphState, et les fonctions retrieve_schema_node et generate_sql_node)

# Question de l'utilisateur
# user_question = "Montre-moi tous les capteurs qui se trouvent √† Paris. Donne-moi leur ID et leur type."

# # Pour rendre l'exemple int√©ressant, ajoutons une donn√©e
# cursor.execute("INSERT INTO sensors (id, location, type) VALUES ('sensor_789', 'Paris', 'Temp√©rature');")
# conn.commit()

# # Lancer le graphe avec l'entr√©e initiale
# initial_state = {"question": user_question, "query_result": []} # Initialiser query_result
# final_state = sql_agent_mvp.invoke(initial_state)

# # Afficher le r√©sultat complet
# print("\n--- ‚úÖ R√âSULTAT FINAL COMPLET ---")
# print(f"Question : {final_state['question']}")
# print(f"Requ√™te SQL g√©n√©r√©e :\n{final_state['sql_query']}")
# print(f"R√©sultat de la requ√™te : {final_state['query_result']}")

# (Assurez-vous que le code des √©tapes pr√©c√©dentes est pr√©sent et ex√©cut√©)

# Question de l'utilisateur
user_question_3 = "Combien y a-t-il de relev√©s pour chaque capteur ?"

# Lancer le graphe
initial_state = {"question": user_question_3}
final_state = sql_agent_mvp.invoke(initial_state)

# Afficher le contenu du datastore pour v√©rifier
print("\n--- üóÑÔ∏è CONTENU DU DATASTORE ---")
import pprint
pprint.pprint(DATASTORE)