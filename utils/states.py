from typing import TypedDict, List, Any, Annotated
from langchain_core.messages import AnyMessage
from langgraph.graph.message import add_messages


class OverallState(TypedDict):
    messages: Annotated[list[AnyMessage], add_messages]
    datastore: dict
    database_schema: dict

class SQLState(TypedDict):
    """
    Represents the state carried through the SQL agent workflow.

    Attributes:
        question: The user's natural language question.
        sql_query: The SQL query generated by the LLM.
        query_result: Result returned after executing the SQL query.
        description: Human readable context for the stored data.
        answer: Message summarizing the work for the supervisor.
        reference_key: Unique key for datastore storage.
        error_message: Error message if execution fails.
    """
    question: str
    sql_query: str
    query_result: List[Any]
    description: str
    answer: str  # response to send back to the supervisor
    reference_key: str
    error_message: str
